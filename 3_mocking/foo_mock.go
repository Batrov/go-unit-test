// Code generated by MockGen. DO NOT EDIT.
// Source: ./3_mocking/foo.go

// Package module3 is a generated GoMock package.
package module3

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFooInterface is a mock of FooInterface interface.
type MockFooInterface struct {
	ctrl     *gomock.Controller
	recorder *MockFooInterfaceMockRecorder
}

// MockFooInterfaceMockRecorder is the mock recorder for MockFooInterface.
type MockFooInterfaceMockRecorder struct {
	mock *MockFooInterface
}

// NewMockFooInterface creates a new mock instance.
func NewMockFooInterface(ctrl *gomock.Controller) *MockFooInterface {
	mock := &MockFooInterface{ctrl: ctrl}
	mock.recorder = &MockFooInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFooInterface) EXPECT() *MockFooInterfaceMockRecorder {
	return m.recorder
}

// getMessage mocks base method.
func (m *MockFooInterface) getMessage(id int64) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getMessage", id)
	ret0, _ := ret[0].(string)
	return ret0
}

// getMessage indicates an expected call of getMessage.
func (mr *MockFooInterfaceMockRecorder) getMessage(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getMessage", reflect.TypeOf((*MockFooInterface)(nil).getMessage), id)
}

// sum mocks base method.
func (m *MockFooInterface) sum(a, b int64) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "sum", a, b)
	ret0, _ := ret[0].(int64)
	return ret0
}

// sum indicates an expected call of sum.
func (mr *MockFooInterfaceMockRecorder) sum(a, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "sum", reflect.TypeOf((*MockFooInterface)(nil).sum), a, b)
}
